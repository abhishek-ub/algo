Name: Abhishek
Id: aks

Introduction
Huffman coding is one of the most important and elegant techniques in information theory. For a given sequence of input symbols, and their counts, it builds a binary tree that can then be used to generate the optimal binary encoding of each symbol. The basic algorithm to build a Huffman tree can be summarized as follows:

1. Create leaf node for every input symbol
2. Take two nodes with the lowest count
3. Attach them to a new parent node that stores empty symbol with the count equal to the sum of
counts in children
4. Repeat steps 2 and 3 until all nodes are connected
          
Instructions

The a7.cpp file and the corresponding symbol.hpp file provide code to handle input text, to represent input symbols and their count, and supply a structure of a binary tree node.

In a7.hpp implement function huffman_tree considering the following:
The function should return a pointer to a root node of the Huffman tree for a sequence of symbols in [first,last).
Arguments first,last represent the input sequence of symbols, and (last - first) â‰¥ 2.
Each element in the sequence is of type symbol, which stores a symbol and its count (inspect symbol.hpp).
Tree consists of nodes of type bnode<symbol> (inspect symbol.hpp).
For a given node in the resulting Huffman tree, left child must store symbol that is "less than" symbol in right child (inspect symbol.hpp).

In a7.hpp implement function release_tree considering the following:
The function should free memory occupied by the tree returned by huffman_tree to ensure that no memory leaks occur when program terminates.

To test your code you can use these two files: dummy.txt and loremipsum.txt.

If executed like this:
./a7 dummy.txt you should receive the following output:
B 000
U 001
H 01
A 1 For Lorem Ipsum:
./a7 loremipsum.txt
